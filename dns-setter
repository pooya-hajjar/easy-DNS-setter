#!/bin/bash

if ! command -v nmcli &> /dev/null; then
    echo "NetworkManager (nmcli) is not installed. Please install it and try again."
    exit 1
fi

# Check if sufficient arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: dns-setter <alias> <driver_name>"
    exit 1
fi

# Get the alias and driver name from the arguments
alias=$1
driver_name=$2

# Define DNS aliases
declare -A dns_map
dns_map["cloudflare"]="1.1.1.1,1.0.0.1"
dns_map["google"]="8.8.8.8,8.8.4.4"
dns_map["shecan"]="178.22.122.100,185.51.200.2"
dns_map["403"]="10.202.10.202,10.202.10.102"
dns_map["radar"]="10.202.10.10,10.202.10.11"
dns_map["electro"]="78.157.42.101,78.157.42.100"

# Find the connection
connection=$(nmcli -t -f NAME,TYPE c | grep "^$driver_name" | awk -F: '{print $1}')

if [ -z "$connection" ]; then
    echo "No connection found for driver $driver_name."
    echo "Available connections:"
    nmcli -t -f NAME,TYPE c
    exit 1
fi

if [ "$alias" = "none" ]; then
    echo "Setting DNS to automatic (none) for connection $connection"
    nmcli con mod "$connection" ipv4.ignore-auto-dns no   # Enable automatic DNS
    nmcli con mod "$connection" ipv4.dns ""               # Clear any existing DNS
else
    # Check if the alias exists in the map
    if [ -z "${dns_map[$alias]}" ]; then
        echo "Unknown alias: $alias"
        exit 1
    fi

    # Get the DNS servers for the alias
    dns_servers=${dns_map[$alias]}

    echo "Setting DNS servers to $dns_servers for connection $connection"
    nmcli con mod "$connection" ipv4.ignore-auto-dns yes  # Disable automatic DNS
    nmcli con mod "$connection" ipv4.dns "$dns_servers"   # Set the provided DNS servers
fi

# Apply the changes
nmcli con up "$connection"

echo "DNS servers updated successfully for connection."
